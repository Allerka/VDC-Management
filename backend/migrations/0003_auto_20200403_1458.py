# Generated by Django 3.0.3 on 2020-04-03 14:58

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('backend', '0002_auto_20200217_2159'),
    ]

    operations = [
        migrations.CreateModel(
            name='DynoParameters',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('units', models.CharField(choices=[('M', 'Metric'), ('I', 'Imperial')], max_length=1, verbose_name='Measurement units')),
                ('test', models.CharField(choices=[('COAST', 'Coasting Time from Road Test'), ('COEFF', 'Coefficient of Road Test')], max_length=5, verbose_name='Parameter Selection')),
                ('speed1', models.PositiveSmallIntegerField(blank=True)),
                ('speed2', models.PositiveSmallIntegerField(blank=True)),
                ('speed3', models.PositiveSmallIntegerField(blank=True)),
                ('speed4', models.PositiveSmallIntegerField(blank=True)),
                ('speed5', models.PositiveSmallIntegerField(blank=True)),
                ('coeff1', models.PositiveSmallIntegerField(blank=True)),
                ('coeff2', models.PositiveSmallIntegerField(blank=True)),
                ('coeff3', models.PositiveSmallIntegerField(blank=True)),
                ('region', models.CharField(choices=[('E', 'European Union'), ('U', 'Usa')], max_length=1, verbose_name='Region')),
                ('cold', models.BooleanField(verbose_name='Cold coefficents?')),
                ('cold_co1', models.DecimalField(decimal_places=5, max_digits=10, verbose_name='Cold Target Coeff A')),
                ('cold_co2', models.DecimalField(decimal_places=5, max_digits=10, verbose_name='Cold Target Coeff B')),
                ('cold_co3', models.DecimalField(decimal_places=5, max_digits=10, verbose_name='Cold Target Coeff C')),
                ('weight', models.PositiveSmallIntegerField(verbose_name='Vehicle test weight')),
                ('inertia', models.BooleanField(verbose_name='Add inertia class?')),
            ],
        ),
        migrations.CreateModel(
            name='FinalInfo',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('front_hooks', models.BooleanField(verbose_name='Front tow hooks?')),
                ('rear_hooks', models.BooleanField(verbose_name='Rear tow hooks?')),
                ('desc', models.CharField(blank=True, max_length=100, verbose_name='Second mounting location')),
                ('d_rings', models.BooleanField(verbose_name='D-Rings present?')),
                ('mount', models.TextField(blank=True, max_length=255, verbose_name='Mounting method info')),
                ('marmon', models.BooleanField(verbose_name='Marmon rings present?')),
                ('info', models.TextField(max_length=255, verbose_name='Additional exhaust info')),
                ('photo', models.FileField(upload_to='', verbose_name='Upload photo')),
                ('shutdown', models.BooleanField(verbose_name='Shutdown components?')),
                ('external', models.BooleanField(verbose_name='External measurement?')),
                ('equipment', models.TextField(blank=True, max_length=400, verbose_name='Equipment notes')),
                ('upload', models.FileField(upload_to='', verbose_name='Additional documents or pictures')),
                ('probe1', models.CharField(max_length=20, verbose_name='Engine Out MSS')),
                ('probe2', models.CharField(max_length=20, verbose_name='Pre Cat Modal')),
                ('probe3', models.CharField(max_length=20, verbose_name='Mid-bed Modal')),
                ('probe4', models.CharField(max_length=20, verbose_name='Post Cat Modal')),
                ('probe5', models.CharField(max_length=20, verbose_name='EGR')),
                ('probe6', models.CharField(blank=True, max_length=20, verbose_name='Other')),
                ('probe6_name', models.CharField(blank=True, max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='FuelInfo',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('type', models.CharField(max_length=20, verbose_name='Fuel type')),
                ('density', models.DecimalField(decimal_places=1, max_digits=2, verbose_name='Fuel density')),
                ('carbon', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='Carbon rate')),
                ('caloric', models.CharField(max_length=10, verbose_name='Caloric power')),
                ('h_rate', models.DecimalField(decimal_places=3, max_digits=6, verbose_name='H-Rate')),
                ('o_rate', models.DecimalField(decimal_places=3, max_digits=6, verbose_name='O-Rate')),
            ],
        ),
        migrations.CreateModel(
            name='Requester',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('r_name', models.CharField(max_length=50, verbose_name='Name of requester')),
                ('r_email', models.EmailField(max_length=254, verbose_name="Requester's e-mail")),
                ('r_phone', models.CharField(max_length=10, verbose_name="Requester's phone number")),
                ('r_mobile', models.CharField(blank=True, max_length=10, verbose_name="Requester's mobile (if different)")),
                ('t_name', models.CharField(max_length=50, verbose_name='Name of testing engineer')),
                ('t_email', models.EmailField(max_length=50, verbose_name="Tester's e-mail")),
                ('t_phone', models.CharField(max_length=10, verbose_name="Tester's phone number")),
                ('date', models.DateField(auto_now_add=True, verbose_name='Request submission date')),
            ],
        ),
        migrations.CreateModel(
            name='VehicleInfo',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('units', models.CharField(choices=[('M', 'Metric'), ('I', 'Imperial')], max_length=1, verbose_name='Measurement units')),
                ('manufacturer', models.CharField(max_length=50, verbose_name='Vehicle Manufacturer')),
                ('model', models.CharField(max_length=50, verbose_name='Vehicle Model')),
                ('identifier', models.CharField(blank=True, max_length=50, verbose_name='Special identifier')),
                ('year', models.PositiveSmallIntegerField(verbose_name='Model Year')),
                ('color', models.CharField(max_length=20, verbose_name='Exterior Color')),
                ('fuel_cap', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='Fuel capacity')),
                ('vin', models.CharField(max_length=17, verbose_name='Vehicle VIN')),
                ('license', models.CharField(blank=True, max_length=10, verbose_name='Vehicle license #')),
                ('customer', models.CharField(max_length=50, verbose_name='Customer company')),
                ('legislation', models.CharField(choices=[('WLTP', 'Wltp')], max_length=10, verbose_name='Legislation Limit')),
                ('drivetrain', models.CharField(choices=[('FWD', 'Fwd'), ('RWD', 'Rwd'), ('AWD', 'Awd')], max_length=3, verbose_name='Drivetrain')),
                ('spin', models.BooleanField(verbose_name='Spin non-powered tires?')),
                ('transmission', models.CharField(choices=[('A', 'Automatic'), ('M', 'Manual'), ('O', 'Other')], max_length=1, verbose_name='Transmision system')),
                ('family', models.CharField(max_length=100, verbose_name='Engine family')),
                ('power', models.PositiveSmallIntegerField(blank=True, verbose_name='Power (HP)')),
                ('displacement', models.DecimalField(blank=True, decimal_places=1, max_digits=3, verbose_name='Engine Displacement')),
                ('wheelbase', models.PositiveSmallIntegerField(verbose_name='Wheelbase size')),
                ('f_pressure', models.PositiveSmallIntegerField(blank=True, verbose_name='Front tire pressure')),
                ('r_pressure', models.PositiveSmallIntegerField(blank=True, verbose_name='Rear tire pressure')),
                ('dpf', models.BooleanField(verbose_name='DPF in use?')),
            ],
        ),
        migrations.AlterField(
            model_name='vehicle',
            name='year',
            field=models.PositiveSmallIntegerField(verbose_name='model year or year of manufacture'),
        ),
    ]
