# Generated by Django 3.1.5 on 2021-04-05 20:22

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('backend', '0070_errorcodes_location'),
    ]

    operations = [
        migrations.CreateModel(
            name='Procedures',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, choices=[('AC17', 'AC17'), ('AnalogOutputTest', 'AnalogOutputTest'), ('BagModalTest', 'BagModalTest'), ('BEVChargeDepletion', 'BEVChargeDepletion'), ('CerSS4BagHiSpeedFCA', 'CerSS4BagHiSpeedFCA'), ('CerSS4BagHiSpeedFCAShort', 'CerSS4BagHiSpeedFCAShort'), ('CerSS4BagLoSpeedFCA', 'CerSS4BagLoSpeedFCA'), ('CerSS9BagFCA', 'CerSS9BagFCA'), ('CRC', 'CRC'), ('CVS Injection 1 Bag', 'CVS Injection 1 Bag'), ('CVS Injection 2 Bag', 'CVS Injection 2 Bag'), ('CVS Injection 3 Bag', 'CVS Injection 3 Bag'), ('CVS Injection 4 Bag', 'CVS Injection 4 Bag'), ('DieselReganPromaster', 'DieselReganPromaster'), ('DieselReganPromasterV2', 'DieselReganPromasterV2'), ('DieselRegenCycleFCA', 'DieselRegenCycleFCA'), ('ECE 15x20', 'ECE 15x20'), ('EPA 72 2 Bag', 'EPA 72 2 Bag'), ('EPA 72 2 Bag ATV', 'EPA 72 2 Bag ATV'), ('EPA 72 2 Bag Cold', 'EPA 72 2 Bag Cold'), ('EPA 72 2 Bag EngineStop', 'EPA 72 2 Bag EngineStop'), ('EPA 72 2 Bag MSS', 'EPA 72 2 Bag MSS'), ('EPA 72 2 Bag x3 Promaster', 'EPA 72 2 Bag x3 Promaster'), ('EPA 72 Single Bag x4', 'EPA 72 Single Bag x4'), ('EPA 75 2 Bag', 'EPA 75 2 Bag'), ('EPA 75 2 Bag EngineStop', 'EPA 75 2 Bag EngineStop'), ('EPA 75 3 Bag', 'EPA 75 3 Bag'), ('EPA 75 3 Bag ATV', 'EPA 75 3 Bag ATV'), ('EPA 75 3 Bag BEV', 'EPA 75 3 Bag BEV'), ('EPA 75 3 Bag EngineStop', 'EPA 75 3 Bag EngineStop'), ('EPA 75 3 Bag MSS', 'EPA 75 3 Bag MSS'), ('EPA 75 3 Bag PEMS', 'EPA 75 3 Bag PEMS'), ('EPA 75 4 Bag', 'EPA 75 4 Bag'), ('EPA 75 4 Bag EngineStop', 'EPA 75 4 Bag EngineStop'), ('EPA 75 4 Bag MSS', 'EPA 75 4 Bag MSS'), ('EPA 75 4 Bag No Soak', 'EPA 75 4 Bag No Soak'), ('EPA 75 HWFET', 'EPA 75 HWFET'), ('EPA 75 HWFET US06', 'EPA 75 HWFET US06'), ('EPA75 505s', 'EPA75 505s'), ('EPA75 505x2', 'EPA75 505x2'), ('EUDCx3 Prep', 'EUDCx3 Prep'), ('EUDCx3 Prep APPENG', 'EUDCx3 Prep APPENG'), ('Euro5RLD60kph', 'Euro5RLD60kph'), ('Euro5Type6Cold', 'Euro5Type6Cold'), ('Euro5Type6Precon', 'Euro5Type6Precon'), ('FTP4PhaseUS06Combo', 'FTP4PhaseUS06Combo'), ('FTP75HWFETCombo', 'FTP75HWFETCombo'), ('FTP75US06Corning', 'FTP75US06Corning'), ('FTP75US06Umicore', 'FTP75US06Umicore'), ('HEV CD WLTC Class3b', 'HEV CD WLTC Class3b'), ('HEV CS WLTC Class3b', 'HEV CS WLTC Class3b'), ('HillClimbTowNissan', 'HillClimbTowNissan'), ('HWFET', 'HWFET'), ('HWFET WU', 'HWFET WU'), ('HWFET WU Factory', 'HWFET WU Factory'), ('HWFET WU MSS', 'HWFET WU MSS'), ('HWFETx3', 'HWFETx3'), ('HWFETx4', 'HWFETx4'), ('IdleCo', 'IdleCo'), ('J1634ColdFTPCD', 'J1634ColdFTPCD'), ('J1634ComboUS06NoUDDS', 'J1634ComboUS06NoUDDS'), ('J1634MidChargeCombo', 'J1634MidChargeCombo'), ('J1634MidChargeComboUS06', 'J1634MidChargeComboUS06'), ('J1634MidChargeComboV2', 'J1634MidChargeComboV2'), ('J1634MidChargeComboV2Plus2xUS06', 'J1634MidChargeComboV2Plus2xUS06'), ('JAPAN 1015', 'JAPAN 1015'), ('JAPAN 11', 'JAPAN 11'), ('JC08C', 'JC08C'), ('JC08H', 'JC08H'), ('LA4US06Corning', 'LA4US06Corning'), ('LA4x2Umicore', 'LA4x2Umicore'), ('LA92', 'LA92'), ('LA92WU', 'LA92WU'), ('LA92WUNoSoak', 'LA92WUNoSoak'), ('LA92WUNoSoakMSS', 'LA92WUNoSoakMSS'), ('LA92x3NoSoak', 'LA92x3NoSoak'), ('MCT55LucidAirVIN9Lucid', 'MCT55LucidAirVIN9Lucid'), ('MCT55PorscheTaycanFEV', 'MCT55PorscheTaycanFEV'), ('MCT55TeslaModelSLucid', 'MCT55TeslaModelSLucid'), ('MCT65_CSC2h', 'MCT65_CSC2h'), ('MCT65LucidAirVIN86Lucid', 'MCT65LucidAirVIN86Lucid'), ('MCT65LucidAirVIN86LucidEnd', 'MCT65LucidAirVIN86LucidEnd'), ('MCT65RivianR1TProdRICTAdjRivian', 'MCT65RivianR1TProdRICTAdjRivian'), ('MCT65RivianR1TVP2RICTRivian', 'MCT65RivianR1TVP2RICTRivian'), ('MCT65TeslaModel3Ford', 'MCT65TeslaModel3Ford'), ('MCTAudiEtron', 'MCTAudiEtron'), ('MCTAudiEtronCold', 'MCTAudiEtronCold'), ('MCTAudiEtronShort', 'MCTAudiEtronShort'), ('MCTChevyBoltTI', 'MCTChevyBoltTI'), ('MCTColdFusionTest', 'MCTColdFusionTest'), ('MCTDynamic', 'MCTDynamic'), ('MCTDynamicx4', 'MCTDynamicx4'), ('MCTHyundaiKonalEPAVW', 'MCTHyundaiKonalEPAVW'), ('MCTNissanLeaf', 'MCTNissanLeaf'), ('MCTNissanLeafShort', 'MCTNissanLeafShort'), ('MCTPractice', 'MCTPractice'), ('MCTShort', 'MCTShort'), ('MCTTeslaModel3', 'MCTTeslaModel3'), ('MCTTeslaModel3EPAVW', 'MCTTeslaModel3EPAVW'), ('MCTTeslaModel3MPGVW', 'MCTTeslaModel3MPGVW'), ('MVEG AAT', 'MVEG AAT'), ('MVEG AAT Low Power', 'MVEG AAT Low Power'), ('MVEG A MT', 'MVEG A MT'), ('MVEG A MT Low Power', 'MVEG A MT Low Power'), ('MVEG B AT', 'MVEG B AT'), ('MVEG B AT Low Power', 'MVEG B AT Low Power'), ('MVEG B AT Low Power without DC points', 'MVEG B AT Low Power without DC points'), ('MVEG B AT Nissan', 'MVEG B AT Nissan'), ('MVEG B AT Nissan Cold', 'MVEG B AT Nissan Cold'), ('MVEG B AT without DC points', 'MVEG B AT without DC points'), ('MVEG B COLD AT', 'MVEG B COLD AT'), ('MVEG B COLD MT', 'MVEG B COLD MT'), ('MVEG B MT', 'MVEG B MT'), ('MVEG B MT Low Power', 'MVEG B MT Low Power'), ('MVEG B PREP AT', 'MVEG B PREP AT'), ('MVEG B PREP MT', 'MVEG B PREP MT'), ('NEDCRoadLoadDerivation AT', 'NEDCRoadLoadDerivation AT'), ('NEDCRoadLoadDerivation MT', 'NEDCRoadLoadDerivation MT'), ('NEDCRoadLoadDerivationShort AT', 'NEDCRoadLoadDerivationShort AT'), ('New York City Cycle', 'New York City Cycle'), ('OvernightRecord', 'OvernightRecord'), ('PEV Shorty STP', 'PEV Shorty STP'), ('PEV WLTC Class3b CCP', 'PEV WLTC Class3b CCP'), ('PEV WLTC Class3b STP example', 'PEV WLTC Class3b STP example'), ('PMBackgroundCheck', 'PMBackgroundCheck'), ('RDE1SUBARUQX50', 'RDE1SUBARUQX50'), ('RDE2SUBARUQX50', 'RDE2SUBARUQX50'), ('RDE3SUBARUQX50', 'RDE3SUBARUQX50'), ('RDE95Nissan', 'RDE95Nissan'), ('RDEHinoHighway', 'RDEHinoHighway'), ('RDEPEMSFEVRoute1', 'RDEPEMSFEVRoute1'), ('RDEPEMSFEVRoute2', 'RDEPEMSFEVRoute2'), ('RDEPEMSFEVRouteGrade', 'RDEPEMSFEVRouteGrade'), ('RDERicardo', 'RDERicardo'), ('RDESi16AG645a', 'RDESi16AG645a'), ('RDESi16aggrV2', 'RDESi16aggrV2'), ('RLD', 'RLD'), ('RunningLoss', 'RunningLoss'), ('SC03', 'SC03'), ('SC03 EngineStop', 'SC03 EngineStop'), ('SC03 WU', 'SC03 WU'), ('SC03x5', 'SC03x5'), ('ShortModalTest', 'ShortModalTest'), ('Shorty 8 Phase', 'Shorty 8 Phase'), ('Shorty P1', 'Shorty P1'), ('Shorty P1 Hotsoak P2', 'Shorty P1 Hotsoak P2'), ('Shorty P1P2 WU', 'Shorty P1P2 WU'), ('Shorty P1P2P1 Split', 'Shorty P1P2P1 Split'), ('Shorty P1P2P3P4', 'Shorty P1P2P3P4'), ('Shorty P1P2P3P4 ten phase', 'Shorty P1P2P3P4 ten phase'), ('Shorty P1P2P3P4 ten phase no soak', 'Shorty P1P2P3P4 ten phase no soak'), ('Shorty P1P2P3P4 ten phase2', 'Shorty P1P2P3P4 ten phase2'), ('Shorty P1P2SKP3', 'Shorty P1P2SKP3'), ('Shorty P1P2SKP3 EngineStop', 'Shorty P1P2SKP3 EngineStop'), ('Shorty P1SKP2SKP3', 'Shorty P1SKP2SKP3'), ('Slope120kphIdleNissan', 'Slope120kphIdleNissan'), ('SPEEDZERO', 'SPEEDZERO'), ('STEADYSTATE', 'STEADYSTATE'), ('SteadyState1200sGradeNeg8', 'SteadyState1200sGradeNeg8'), ('SteadyStateNissanAltimaUSCAR', 'SteadyStateNissanAltimaUSCAR'), ('STEADYSTATEQX50', 'STEADYSTATEQX50'), ('TransFluidColdStartGM', 'TransFluidColdStartGM'), ('TransFluidColdStartGM2', 'TransFluidColdStartGM2'), ('TransFluidColdStartGM3', 'TransFluidColdStartGM3'), ('UDDS HD', 'UDDS HD'), ('US06', 'US06'), ('US06 EngineStop', 'US06 EngineStop'), ('US06 MSS', 'US06 MSS'), ('US06 SB WU', 'US06 SB WU'), ('US06 SB WU MSS', 'US06 SB WU MSS'), ('US06 SB WU USPS', 'US06 SB WU USPS'), ('US06 Split', 'US06 Split'), ('US06 Split EngineStop', 'US06 Split EngineStop'), ('US06 Split WU', 'US06 Split WU'), ('US06 US06 Split', 'US06 US06 Split'), ('US06 WU', 'US06 WU'), ('US06 WU USPS', 'US06 WU USPS'), ('US06DynamicOnly', 'US06DynamicOnly'), ('US06WUx2', 'US06WUx2'), ('US06x2LA4x2Corning', 'US06x2LA4x2Corning'), ('WLTC BW', 'WLTC BW'), ('WLTC BW NoPhases', 'WLTC BW NoPhases'), ('WLTC BW Phases', 'WLTC BW Phases'), ('WLTC Class1', 'WLTC Class1'), ('WLTC Class2', 'WLTC Class2'), ('WLTC Class3a', 'WLTC Class3a'), ('WLTC Class3a 3 Bag', 'WLTC Class3a 3 Bag'), ('WLTC Class3b', 'WLTC Class3b'), ('WLTC Class3b 3 Bag', 'WLTC Class3b 3 Bag'), ('WLTC Class3b MSS', 'WLTC Class3b MSS'), ('WLTC Class3b PlusCity', 'WLTC Class3b PlusCity'), ('WLTPDepletion100ProscheTaycanFEV', 'WLTPDepletion100ProscheTaycanFEV'), ('WLTPDepletion100TeslaModel3Ford', 'WLTPDepletion100TeslaModel3Ford'), ('zCerSSFCA', 'zCerSSFCA'), ('zCertSSShortFCA', 'zCertSSShortFCA')], default='None', max_length=100, verbose_name='Test Procedure name')),
                ('length', models.PositiveSmallIntegerField(verbose_name='Sample length')),
            ],
        ),
        migrations.AlterModelOptions(
            name='fieldchoices',
            options={'verbose_name_plural': 'Field Choices'},
        ),
        migrations.AlterField(
            model_name='datahandler',
            name='spreadsheet',
            field=models.FileField(blank=True, max_length=255, null=True, upload_to='uploads/%Y/%m/'),
        ),
        migrations.AlterField(
            model_name='fieldchoices',
            name='field_name',
            field=models.CharField(choices=[('veh_type', 'Vehicle Type'), ('fuel_type', 'Fuel Type'), ('regulation', 'Regulation'), ('cert_level', 'Certification Level'), ('marmon', 'Marmon Distance'), ('dyno_roll', 'Dyno Roll Mode'), ('mode', 'Mode Selection'), ('hooks', 'Front/Rear Hooks'), ('country', 'Country'), ('massUS', 'Vehicle Mass (Standard)'), ('etwUS', 'Test Mass (Standard)'), ('massUSM', 'Vehicle Mass (Metric)'), ('etwUSM', 'Test Mass (Metric)'), ('status', 'Submission Status'), ('procedure', 'Test Procedure'), ('shift_list', 'Shift List'), ('test_config', 'Test Configuration'), ('sample_config', 'Sample Line Configuration'), ('test_reg', 'Test Regulation'), ('test_fuel', 'Test Fuel Type'), ('pollutant', 'Pollutant Limits'), ('channel', 'Channel Set'), ('sao_offset', 'SAO Offset'), ('check_type', 'Idle Check Type'), ('coast_config', 'Coastdown Configuration'), ('flow_stream', 'Flow Stream'), ('test_type', 'Test Type'), ('flow_rates', 'Flow Rate Samples'), ('break_off', 'Break-off/End-of-Test Criterion')], max_length=255, verbose_name='Form field name'),
        ),
        migrations.AlterField(
            model_name='fieldchoices',
            name='label',
            field=models.CharField(max_length=255, verbose_name='Displayed name'),
        ),
        migrations.AlterField(
            model_name='fieldchoices',
            name='value',
            field=models.CharField(max_length=255, verbose_name='Internal storage value'),
        ),
        migrations.AlterField(
            model_name='historicaldatahandler',
            name='spreadsheet',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='historicalfieldchoices',
            name='field_name',
            field=models.CharField(choices=[('veh_type', 'Vehicle Type'), ('fuel_type', 'Fuel Type'), ('regulation', 'Regulation'), ('cert_level', 'Certification Level'), ('marmon', 'Marmon Distance'), ('dyno_roll', 'Dyno Roll Mode'), ('mode', 'Mode Selection'), ('hooks', 'Front/Rear Hooks'), ('country', 'Country'), ('massUS', 'Vehicle Mass (Standard)'), ('etwUS', 'Test Mass (Standard)'), ('massUSM', 'Vehicle Mass (Metric)'), ('etwUSM', 'Test Mass (Metric)'), ('status', 'Submission Status'), ('procedure', 'Test Procedure'), ('shift_list', 'Shift List'), ('test_config', 'Test Configuration'), ('sample_config', 'Sample Line Configuration'), ('test_reg', 'Test Regulation'), ('test_fuel', 'Test Fuel Type'), ('pollutant', 'Pollutant Limits'), ('channel', 'Channel Set'), ('sao_offset', 'SAO Offset'), ('check_type', 'Idle Check Type'), ('coast_config', 'Coastdown Configuration'), ('flow_stream', 'Flow Stream'), ('test_type', 'Test Type'), ('flow_rates', 'Flow Rate Samples'), ('break_off', 'Break-off/End-of-Test Criterion')], max_length=255, verbose_name='Form field name'),
        ),
        migrations.AlterField(
            model_name='historicalfieldchoices',
            name='label',
            field=models.CharField(max_length=255, verbose_name='Displayed name'),
        ),
        migrations.AlterField(
            model_name='historicalfieldchoices',
            name='value',
            field=models.CharField(max_length=255, verbose_name='Internal storage value'),
        ),
        migrations.AlterUniqueTogether(
            name='fieldchoices',
            unique_together={('field_name', 'value', 'label')},
        ),
        migrations.CreateModel(
            name='Tests',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('active', models.BooleanField(default=True, verbose_name='Active entry?')),
                ('fan_coeff_1', models.PositiveSmallIntegerField(verbose_name='Fan Coefficient A')),
                ('fan_coeff_2', models.PositiveSmallIntegerField(verbose_name='Fan Coefficient B')),
                ('fan_coeff_3', models.PositiveSmallIntegerField(verbose_name='Fan Coefficient C')),
                ('dilution', models.BooleanField(verbose_name='Dilution Air Heater')),
                ('flow_stream', models.CharField(blank=True, choices=[('Tunnel', 'Tunnel'), ('RMT', 'RMT')], default='None', max_length=100, verbose_name='Flow Stream')),
                ('heat_exchange', models.BooleanField(verbose_name='Heat Exchanger')),
                ('test_type', models.CharField(blank=True, choices=[('EmissionsTest', 'Emissions Test'), ('CFO', 'CFO')], default='None', max_length=100, verbose_name='Test Type')),
                ('shift_list', models.CharField(blank=True, choices=[], default='None', max_length=100, verbose_name='Shift List')),
                ('test_config', models.CharField(blank=True, choices=[], default='None', max_length=100, verbose_name='Test Configuration')),
                ('sample_config', models.CharField(blank=True, choices=[], default='None', max_length=100, verbose_name='Sample Line Configuration')),
                ('test_reg', models.CharField(blank=True, choices=[('Brazil L6', 'Brazil L6'), ('CFR1066_AC17_FEV', 'CFR1066_AC17_FEV'), ('CFR1066_Cold_FEV', 'CFR1066_Cold_FEV'), ('CFR1066_FEV', 'CFR1066_FEV'), ('CFR1066_FTP_FEV', 'CFR1066_FTP_FEV'), ('CFR1066_FTPCold_FEV', 'CFR1066_FTPCold_FEV'), ('CFR1066_FTPCombo_FEV', 'CFR1066_FTPCombo_FEV'), ('CFR1066_HEV_FEV', 'CFR1066_HEV_FEV'), ('CFR86', 'CFR86'), ('CFR86_FTP', 'CFR_86_FTP'), ('CFR86_SC03', 'CFR86_SC03'), ('Euro 3', 'Euro 3'), ('Euro 4', 'Euro 4'), ('Euro 5', 'Euro 5'), ('Euro 5 Cold', 'Euro 5 Cold'), ('Euro 6b', 'Euro 6b'), ('Euro 6c', 'Euro 6c'), ('Euro 6d Cold', 'Euro 6d Cold'), ('Euro 6d HEV', 'Euro 6d HEV'), ('Euro 6d N20', 'Euro 6d N20'), ('Euro 6d TEMP', 'Euro 6d TEMP'), ('Japan 1015', 'Japan 1015'), ('Japan JC08', 'Japan JC08'), ('WLTP 1b JP', 'WLTP 1b JP'), ('WLTP HEV', 'WLTP HEV'), ('WLTP PEV', 'WLTP PEV'), ('zzzCRF1066_BP', 'CFR1066_BP')], default='None', max_length=100, verbose_name='Regulation selection')),
                ('test_fuel', models.CharField(blank=True, choices=[('BEV', 'BEV'), ('CARBLEVIIIE10PremFCA149223DD', 'CARBLEVIII10PremFCA149223DD'), ('CARBLEVIIIE10PremFCA150080DD', 'CARBLEVIII10PremFCA150080DD'), ('CARBLEVIIIE10PremFCA151789DD', 'CARBLEVIIIE10PremFCA151789DD'), ('CARBLEVIIIE10PremGL0503KK05', 'CARBLEVIIIE10PremGL0503KK05'), ('CARBLEVIIIE10PremTEMAS00DD29', 'CARBLEVIIIE10PremTEMAS00DD29'), ('CARBLEVIIIE10Reg0000020213', 'CARBLEVIIIE10Reg0000020213'), ('CARBLEVIIIE100000029552', 'CARBLEVIIIE100000029552'), ('China6E0Prem13636800', 'China6E0Prem13636800'), ('CRCB0RegFEV180022', 'CRCB0RegFEV180022'), ('CRCC0PremFEV180023', 'CRCC0PremFEV180023'), ('CRCCE15PremFEV180024', 'CRCCE15PremFEV180024'), ('CRCCE30PremFEV180025', 'CRCCE30PremFEV180025'), ('EPADiesel2D13Tank3520430001', 'EPADiesel2D13Tank3520430001'), ('EPADiesel2D13Tank3635970001', 'EPADiesel2D13Tank3635970001'), ('EPADiesel2D2007FCAFK0321LT10', 'EPADiesel2D2007FCAFK0321LT10'), ('EPADiesel2D5Tank3566920001', 'EPADiesel2D5Tank3566920001'), ('EPATier2E0Prem18APU9601', 'EPATier2E0Prem18APU9601'), ('EPATier2E0Prem24799101419', 'EPATier2E0Prem24799101419'), ('EPATier2E0Prem24816101519', 'EPATier2E0Prem24816101519'), ('EPATier2E0Prem25892070920', 'EPATier2E0Prem25892070920'), ('EPATier2E0PremFCA14514600', 'EPATier2E0PremFCA14514600'), ('EPATier2E0PremFCA14629400', 'EPATier2E0PremFCA14629400'), ('EPATier2E0PremFCA14823500', 'EPATier2E0PremFCA14823500'), ('EPATier2E0PremFCA15088100', 'EPATier2E0PremFCA15088100'), ('EPATier2E0PremFCAIB0321LT10', 'EPATier2E0PremFCAIB0321LT10'), ('EPATier2E0PremMBRDNAHA1821GP10', 'EPATier2E0PremMBRDNAHA1821GP10'), ('EPATier2E0RegColdFK1421BE20', 'EPATier2E0RegColdFK1421BE20'), ('EPATier3E10Prem1319400', 'EPATier3E10Prem1319400'), ('EPATier3E10PremBosch13914800', 'EPATier3E10PremBosch13914800'), ('EPATier3E10PremBoschOld', 'EPATier3E10PremBoschOld'), ('EPATier3E10PremColdEE2421BE10', 'EPATier3E10PremColdEE2421BE10'), ('EPATier3E10PremColdFJ3121HW20', 'EPATier3E10PremColdFJ3121HW20'), ('EPATier3E10PremGH2103KG14', 'EPATier3E10PremGH2103KG14'), ('EPATier3E10PremHF2603KK03', 'EPATier3E10PremHF2603KK03'), ('EPATier3E10Reg12807100', 'EPATier3E10Reg12807100'), ('EPATier3E10Reg13109800', 'EPATier3E10Reg13109800'), ('EPATier3E10RegColdFCA14665800', 'EPATier3E10RegColdFCA14665800'), ('EPATier3E10RegColdFCA15156400', 'EPATier3E10RegColdFCA15156400'), ('EPATier3E10RegColdGA1521HW10', 'EPATier3E10RegColdGA1521HW10'), ('EPATier3E10RegColdGL032BE19', 'EPATier3E10RegColdGL032BE19'), ('EPATier3E10RegFCA14489100', 'EPATier3E10RegFCA14489100'), ('EPATier3E10RegFCA14762200', 'EPATier3E10RegFCA14762200'), ('EPATier3E10RegFCA14941200', 'EPATier3E10RegFCA14941200'), ('EPATier3E10RegFCA15105300', 'EPATier3E10RegFCA15105300'), ('EPATier3E10RegFCA15289200', 'EPATier3E10RegFCA15289200'), ('EPATier3E10RegFCA15310600', 'EPATier3E10RegFCA15310600'), ('EPATier3E10RegFCAHL1321LT20', 'EPATier3E10RegFCAHL1321LT20'), ('EPATier3E10RegGH0903T454', 'EPATier3E10RegGH0903T454'), ('EPATier3E10RegGH2203T454', 'EPATier3E10RegGH2203T454'), ('EPATier3E10RegHE2203T454', 'EPATier3E10RegHE2203T454'), ('EPATier3E10RegHE2203T454_2', 'EPATier3E10RegHE2203T454_2'), ('EPATier3E10RegUmicoreHB2021GP10', 'EPATier3E10RegUmicoreHB2021GP10'), ('EPATier3E10RegVWHL1421BE10', 'EPATier3E10RegVWHL1421BE10'), ('EPATier3E85RegFCA14774000', 'EPATier3E85RegFCA14774000'), ('Euro5E5Prem0000023551', 'Euro5E5Prem0000023551'), ('Euro5E5PremG12621GP03', 'Euro5E5PremG12621GP03'), ('Euro5PremS000087', 'Euro5PremS000087'), ('Euro6E10Prem0000024388', 'Euro6E10Prem0000024388'), ('Euro6E10Prem0000026857', 'Euro6E10Prem0000026857'), ('Euro6E10PremColdFD1021GP03', 'Euro6E10PremColdFD1021GP03'), ('Hydrogen', 'Hydrogen'), ('NoFuel', 'NoFuel'), ('PumpE10Prem', 'PumpE10Prem'), ('PumpE10Reg', 'PumpE10Reg')], default='None', max_length=100, verbose_name='Fuel type to be used')),
                ('pollutant', models.CharField(blank=True, choices=[('EPA Tier 2 Bin 2', 'EPA Tier 2 Bin 2'), ('EPA Tier 2 Bin 3', 'EPA Tier 2 Bin 3'), ('EPA Tier 2 Bin 4', 'EPA Tier 2 Bin 4'), ('EPA Tier 2 Bin 5', 'EPA Tier 2 Bin 5'), ('EPA Tier 2 Bin 5 Int', 'EPA Tier 2 Bin 5 Int'), ('EPA Tier 2 Bin 6', 'EPA Tier 2 Bin 6'), ('EPA Tier 2 Bin 6 Int', 'EPA Tier 2 Bin 6 Int'), ('EPA Tier 2 Bin 7', 'EPA Tier 2 Bin 7'), ('EPA Tier 2 Bin 7 Int', 'EPA Tier 2 Bin 7 Int'), ('EPA Tier 2 Bin 8', 'EPA Tier 2 Bin 8'), ('EPA Tier 2 Bin 9 Int', 'EPA Tier 2 Bin 9 Int'), ('EPA Tier 3 Bin 125', 'EPA Tier 3 Bin 125'), ('EPA Tier 3 Bin 160', 'EPA Tier 3 Bin 160'), ('EPA Tier 3 Bin 20', 'EPA Tier 3 Bin 20'), ('EPA Tier 3 Bin 30', 'EPA Tier 3 Bin 30'), ('EPA Tier 3 Bin 50', 'EPA Tier 3 Bin 50'), ('EPA Tier 3 Bin 70', 'EPA Tier 3 Bin 70'), ('EURO 3 Cl Class M1', 'EURO 3 Cl Class M1'), ('EURO 3 Cl Class N1_I', 'EURO 3 Cl Class N1_I'), ('EURO 3 Cl Class N1_II', 'EURO 3 Cl Class N1_II'), ('EURO 3 Cl Class N1_III', 'EURO 3 Cl Class N1_III'), ('EURO 3 Pl Class M1', 'EURO 3 Pl Class M1'), ('EURO 3 Pl Class N1_I', 'EURO 3 Pl Class N1_I'), ('EURO 3 Pl Class N1_II', 'EURO 3 Pl Class N1_II'), ('EURO 3 Pl Class N1_III', 'EURO 3 Pl Class N1_III'), ('EURO 4 Cl Class M1', 'EURO 4 Cl Class M1'), ('EURO 4 Cl Class N1_I', 'EURO 4 Cl Class N1_I'), ('EURO 4 Cl Class N1_II', 'EURO 4 Cl Class N1_II'), ('EURO 4 Cl Class N1_III', 'EURO 4 Cl Class N1_III'), ('EURO 4 Pl Class M1', 'EURO 4 Pl Class M1'), ('EURO 4 Pl Class N1_I', 'EURO 4 Pl Class N1_I'), ('EURO 4 Pl Class N1_II', 'EURO 4 Pl Class N1_II'), ('EURO 4 Pl Class N1_III', 'EURO 4 Pl Class N1_III'), ('EURO 5a Cl Class M N1_I', 'EURO 5a Cl Class M N1_I'), ('EURO 5a Cl Class N1_II', 'EURO 5a Cl Class N1_II'), ('EURO 5a Cl Class N1_III N2', 'EURO 5a Cl Class N1_III N2'), ('EURO 5a Sl Class M N1_I', 'EURO 5a Sl Class M N1_I'), ('EURO 5a Sl Class N1_II', 'EURO 5a Sl Class N1_II'), ('EURO 5a Sl Class N1_III N2', 'EURO 5a Sl Class N1_III N2'), ('EURO 5b Sl Class M N1_I', 'EURO 5b Sl Class M N1_I'), ('EURO 5b Sl Class N1_II', 'EURO 5b Sl Class N1_II'), ('EURO 5b Sl Class N1_III N2', 'EURO 5b Sl Class N1_III N2'), ('EURO 6b Sl Class M N1_I', 'EURO 6b Sl Class M N1_I'), ('EURO 6b Sl Class N1_II', 'EURO 6b Sl Class N1_II'), ('EURO 6b Sl Class N1_III N2', 'EURO 6b Sl Class N1_III N2'), ('Japan PNLT Cl MCV', 'Japan PNLT Cl MCV'), ('Japan PNLT Cl PC LCV', 'Japan PNLT Cl PC LCV'), ('Japan PNLT Sl MCV', 'Japan PNLT Sl MCV'), ('Japan PNLT Sl MLCV', 'Japan PNLT Sl MLCV'), ('Japan PNLT Sl PC LCV', 'Japan PNLT Sl PC LCV')], default='None', max_length=100, verbose_name='Pollutant Limits')),
                ('channel', models.CharField(blank=True, choices=[('VDCDyno1', 'VDCDyno1')], default='None', max_length=100, verbose_name='Channel Set')),
                ('sao_offset', models.CharField(blank=True, choices=[], default='None', max_length=100, verbose_name='SAO Offset')),
                ('post_export', models.BooleanField(verbose_name='Run export after test?')),
                ('post_report', models.BooleanField(verbose_name='Run report after test?')),
                ('idle_check', models.BooleanField(verbose_name='Run idle check?')),
                ('check_type', models.CharField(blank=True, choices=[], default='None', max_length=100, verbose_name='Idle check type')),
                ('idle_high', models.PositiveSmallIntegerField(verbose_name='Idle high minimum value (rpm)')),
                ('skip_first', models.BooleanField(verbose_name='Skip first bag pair?')),
                ('repeat', models.BooleanField(verbose_name='Prompt to repeat test proceudre?')),
                ('break_time', models.PositiveSmallIntegerField(verbose_name='Maximum break time (min)')),
                ('auto_select', models.BooleanField(verbose_name='Auto select bag pairs?')),
                ('bag_read', models.BooleanField(verbose_name='Wait for bag reads?')),
                ('dump_time', models.PositiveSmallIntegerField(verbose_name='Bag pair dump duration (s)')),
                ('side_leak', models.BooleanField(verbose_name='Run vacuum side leak check?')),
                ('hang_up', models.BooleanField(verbose_name='Run hang-up check?')),
                ('blower', models.BooleanField(verbose_name='Run CVS blower?')),
                ('chassis', models.BooleanField(verbose_name='Control chassis dynamometer?')),
                ('road_verify', models.BooleanField(verbose_name='Run road load verification?')),
                ('road_adjust', models.BooleanField(verbose_name='Run road load adjustment?')),
                ('coast_config', models.CharField(blank=True, choices=[('US', 'US')], default='None', max_length=25, verbose_name='Coastdown Configuration')),
                ('gradient', models.BooleanField(verbose_name='Control gradient demand?')),
                ('per_sample', models.BooleanField(verbose_name='Set individual sample rates?')),
                ('all_samples', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('samples', models.CharField(blank=True, max_length=255, null=True, verbose_name='Individual sample rates, stored as a string until JSON support is added')),
                ('recharged', models.BooleanField(verbose_name='Enter recharged electrical energy after test')),
                ('break_off', models.CharField(blank=True, choices=[('NONE', 'None'), ('WLTP PEV', 'WLTP PEV'), ('SAE J1634 PEV', 'SAE J1634 PEV'), ('SAE J1711 HEV FCT', 'SAE J1711 HEV FCT'), ('WLTP HEV CD', 'WLTP HEV CD')], default='None', max_length=50, verbose_name='Break-off / end-of-test criterion')),
                ('pre_speed', models.SmallIntegerField(blank=True, default=0, verbose_name='Pre-pull away speed (km/h)')),
                ('pre_time', models.SmallIntegerField(blank=True, default=0, verbose_name='Pre-pull away time (s)')),
                ('ahead_speed', models.SmallIntegerField(blank=True, default=0, verbose_name='Look ahead speed (s)')),
                ('ahead_throttle', models.SmallIntegerField(blank=True, default=0, verbose_name='Look ahead throttle position (s)')),
                ('ahead_clutch', models.SmallIntegerField(blank=True, default=0, verbose_name='Look ahead clutch position (s)')),
                ('ahead_brake', models.SmallIntegerField(blank=True, default=0, verbose_name='Look ahead brake position (s)')),
                ('procedure', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='backend.procedures')),
                ('vehicle', models.ForeignKey(limit_choices_to={'status': 'APPROVE'}, on_delete=django.db.models.deletion.DO_NOTHING, to='backend.datahandler')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalTests',
            fields=[
                ('id', models.IntegerField(blank=True, db_index=True)),
                ('active', models.BooleanField(default=True, verbose_name='Active entry?')),
                ('fan_coeff_1', models.PositiveSmallIntegerField(verbose_name='Fan Coefficient A')),
                ('fan_coeff_2', models.PositiveSmallIntegerField(verbose_name='Fan Coefficient B')),
                ('fan_coeff_3', models.PositiveSmallIntegerField(verbose_name='Fan Coefficient C')),
                ('dilution', models.BooleanField(verbose_name='Dilution Air Heater')),
                ('flow_stream', models.CharField(blank=True, choices=[('Tunnel', 'Tunnel'), ('RMT', 'RMT')], default='None', max_length=100, verbose_name='Flow Stream')),
                ('heat_exchange', models.BooleanField(verbose_name='Heat Exchanger')),
                ('test_type', models.CharField(blank=True, choices=[('EmissionsTest', 'Emissions Test'), ('CFO', 'CFO')], default='None', max_length=100, verbose_name='Test Type')),
                ('shift_list', models.CharField(blank=True, choices=[], default='None', max_length=100, verbose_name='Shift List')),
                ('test_config', models.CharField(blank=True, choices=[], default='None', max_length=100, verbose_name='Test Configuration')),
                ('sample_config', models.CharField(blank=True, choices=[], default='None', max_length=100, verbose_name='Sample Line Configuration')),
                ('test_reg', models.CharField(blank=True, choices=[('Brazil L6', 'Brazil L6'), ('CFR1066_AC17_FEV', 'CFR1066_AC17_FEV'), ('CFR1066_Cold_FEV', 'CFR1066_Cold_FEV'), ('CFR1066_FEV', 'CFR1066_FEV'), ('CFR1066_FTP_FEV', 'CFR1066_FTP_FEV'), ('CFR1066_FTPCold_FEV', 'CFR1066_FTPCold_FEV'), ('CFR1066_FTPCombo_FEV', 'CFR1066_FTPCombo_FEV'), ('CFR1066_HEV_FEV', 'CFR1066_HEV_FEV'), ('CFR86', 'CFR86'), ('CFR86_FTP', 'CFR_86_FTP'), ('CFR86_SC03', 'CFR86_SC03'), ('Euro 3', 'Euro 3'), ('Euro 4', 'Euro 4'), ('Euro 5', 'Euro 5'), ('Euro 5 Cold', 'Euro 5 Cold'), ('Euro 6b', 'Euro 6b'), ('Euro 6c', 'Euro 6c'), ('Euro 6d Cold', 'Euro 6d Cold'), ('Euro 6d HEV', 'Euro 6d HEV'), ('Euro 6d N20', 'Euro 6d N20'), ('Euro 6d TEMP', 'Euro 6d TEMP'), ('Japan 1015', 'Japan 1015'), ('Japan JC08', 'Japan JC08'), ('WLTP 1b JP', 'WLTP 1b JP'), ('WLTP HEV', 'WLTP HEV'), ('WLTP PEV', 'WLTP PEV'), ('zzzCRF1066_BP', 'CFR1066_BP')], default='None', max_length=100, verbose_name='Regulation selection')),
                ('test_fuel', models.CharField(blank=True, choices=[('BEV', 'BEV'), ('CARBLEVIIIE10PremFCA149223DD', 'CARBLEVIII10PremFCA149223DD'), ('CARBLEVIIIE10PremFCA150080DD', 'CARBLEVIII10PremFCA150080DD'), ('CARBLEVIIIE10PremFCA151789DD', 'CARBLEVIIIE10PremFCA151789DD'), ('CARBLEVIIIE10PremGL0503KK05', 'CARBLEVIIIE10PremGL0503KK05'), ('CARBLEVIIIE10PremTEMAS00DD29', 'CARBLEVIIIE10PremTEMAS00DD29'), ('CARBLEVIIIE10Reg0000020213', 'CARBLEVIIIE10Reg0000020213'), ('CARBLEVIIIE100000029552', 'CARBLEVIIIE100000029552'), ('China6E0Prem13636800', 'China6E0Prem13636800'), ('CRCB0RegFEV180022', 'CRCB0RegFEV180022'), ('CRCC0PremFEV180023', 'CRCC0PremFEV180023'), ('CRCCE15PremFEV180024', 'CRCCE15PremFEV180024'), ('CRCCE30PremFEV180025', 'CRCCE30PremFEV180025'), ('EPADiesel2D13Tank3520430001', 'EPADiesel2D13Tank3520430001'), ('EPADiesel2D13Tank3635970001', 'EPADiesel2D13Tank3635970001'), ('EPADiesel2D2007FCAFK0321LT10', 'EPADiesel2D2007FCAFK0321LT10'), ('EPADiesel2D5Tank3566920001', 'EPADiesel2D5Tank3566920001'), ('EPATier2E0Prem18APU9601', 'EPATier2E0Prem18APU9601'), ('EPATier2E0Prem24799101419', 'EPATier2E0Prem24799101419'), ('EPATier2E0Prem24816101519', 'EPATier2E0Prem24816101519'), ('EPATier2E0Prem25892070920', 'EPATier2E0Prem25892070920'), ('EPATier2E0PremFCA14514600', 'EPATier2E0PremFCA14514600'), ('EPATier2E0PremFCA14629400', 'EPATier2E0PremFCA14629400'), ('EPATier2E0PremFCA14823500', 'EPATier2E0PremFCA14823500'), ('EPATier2E0PremFCA15088100', 'EPATier2E0PremFCA15088100'), ('EPATier2E0PremFCAIB0321LT10', 'EPATier2E0PremFCAIB0321LT10'), ('EPATier2E0PremMBRDNAHA1821GP10', 'EPATier2E0PremMBRDNAHA1821GP10'), ('EPATier2E0RegColdFK1421BE20', 'EPATier2E0RegColdFK1421BE20'), ('EPATier3E10Prem1319400', 'EPATier3E10Prem1319400'), ('EPATier3E10PremBosch13914800', 'EPATier3E10PremBosch13914800'), ('EPATier3E10PremBoschOld', 'EPATier3E10PremBoschOld'), ('EPATier3E10PremColdEE2421BE10', 'EPATier3E10PremColdEE2421BE10'), ('EPATier3E10PremColdFJ3121HW20', 'EPATier3E10PremColdFJ3121HW20'), ('EPATier3E10PremGH2103KG14', 'EPATier3E10PremGH2103KG14'), ('EPATier3E10PremHF2603KK03', 'EPATier3E10PremHF2603KK03'), ('EPATier3E10Reg12807100', 'EPATier3E10Reg12807100'), ('EPATier3E10Reg13109800', 'EPATier3E10Reg13109800'), ('EPATier3E10RegColdFCA14665800', 'EPATier3E10RegColdFCA14665800'), ('EPATier3E10RegColdFCA15156400', 'EPATier3E10RegColdFCA15156400'), ('EPATier3E10RegColdGA1521HW10', 'EPATier3E10RegColdGA1521HW10'), ('EPATier3E10RegColdGL032BE19', 'EPATier3E10RegColdGL032BE19'), ('EPATier3E10RegFCA14489100', 'EPATier3E10RegFCA14489100'), ('EPATier3E10RegFCA14762200', 'EPATier3E10RegFCA14762200'), ('EPATier3E10RegFCA14941200', 'EPATier3E10RegFCA14941200'), ('EPATier3E10RegFCA15105300', 'EPATier3E10RegFCA15105300'), ('EPATier3E10RegFCA15289200', 'EPATier3E10RegFCA15289200'), ('EPATier3E10RegFCA15310600', 'EPATier3E10RegFCA15310600'), ('EPATier3E10RegFCAHL1321LT20', 'EPATier3E10RegFCAHL1321LT20'), ('EPATier3E10RegGH0903T454', 'EPATier3E10RegGH0903T454'), ('EPATier3E10RegGH2203T454', 'EPATier3E10RegGH2203T454'), ('EPATier3E10RegHE2203T454', 'EPATier3E10RegHE2203T454'), ('EPATier3E10RegHE2203T454_2', 'EPATier3E10RegHE2203T454_2'), ('EPATier3E10RegUmicoreHB2021GP10', 'EPATier3E10RegUmicoreHB2021GP10'), ('EPATier3E10RegVWHL1421BE10', 'EPATier3E10RegVWHL1421BE10'), ('EPATier3E85RegFCA14774000', 'EPATier3E85RegFCA14774000'), ('Euro5E5Prem0000023551', 'Euro5E5Prem0000023551'), ('Euro5E5PremG12621GP03', 'Euro5E5PremG12621GP03'), ('Euro5PremS000087', 'Euro5PremS000087'), ('Euro6E10Prem0000024388', 'Euro6E10Prem0000024388'), ('Euro6E10Prem0000026857', 'Euro6E10Prem0000026857'), ('Euro6E10PremColdFD1021GP03', 'Euro6E10PremColdFD1021GP03'), ('Hydrogen', 'Hydrogen'), ('NoFuel', 'NoFuel'), ('PumpE10Prem', 'PumpE10Prem'), ('PumpE10Reg', 'PumpE10Reg')], default='None', max_length=100, verbose_name='Fuel type to be used')),
                ('pollutant', models.CharField(blank=True, choices=[('EPA Tier 2 Bin 2', 'EPA Tier 2 Bin 2'), ('EPA Tier 2 Bin 3', 'EPA Tier 2 Bin 3'), ('EPA Tier 2 Bin 4', 'EPA Tier 2 Bin 4'), ('EPA Tier 2 Bin 5', 'EPA Tier 2 Bin 5'), ('EPA Tier 2 Bin 5 Int', 'EPA Tier 2 Bin 5 Int'), ('EPA Tier 2 Bin 6', 'EPA Tier 2 Bin 6'), ('EPA Tier 2 Bin 6 Int', 'EPA Tier 2 Bin 6 Int'), ('EPA Tier 2 Bin 7', 'EPA Tier 2 Bin 7'), ('EPA Tier 2 Bin 7 Int', 'EPA Tier 2 Bin 7 Int'), ('EPA Tier 2 Bin 8', 'EPA Tier 2 Bin 8'), ('EPA Tier 2 Bin 9 Int', 'EPA Tier 2 Bin 9 Int'), ('EPA Tier 3 Bin 125', 'EPA Tier 3 Bin 125'), ('EPA Tier 3 Bin 160', 'EPA Tier 3 Bin 160'), ('EPA Tier 3 Bin 20', 'EPA Tier 3 Bin 20'), ('EPA Tier 3 Bin 30', 'EPA Tier 3 Bin 30'), ('EPA Tier 3 Bin 50', 'EPA Tier 3 Bin 50'), ('EPA Tier 3 Bin 70', 'EPA Tier 3 Bin 70'), ('EURO 3 Cl Class M1', 'EURO 3 Cl Class M1'), ('EURO 3 Cl Class N1_I', 'EURO 3 Cl Class N1_I'), ('EURO 3 Cl Class N1_II', 'EURO 3 Cl Class N1_II'), ('EURO 3 Cl Class N1_III', 'EURO 3 Cl Class N1_III'), ('EURO 3 Pl Class M1', 'EURO 3 Pl Class M1'), ('EURO 3 Pl Class N1_I', 'EURO 3 Pl Class N1_I'), ('EURO 3 Pl Class N1_II', 'EURO 3 Pl Class N1_II'), ('EURO 3 Pl Class N1_III', 'EURO 3 Pl Class N1_III'), ('EURO 4 Cl Class M1', 'EURO 4 Cl Class M1'), ('EURO 4 Cl Class N1_I', 'EURO 4 Cl Class N1_I'), ('EURO 4 Cl Class N1_II', 'EURO 4 Cl Class N1_II'), ('EURO 4 Cl Class N1_III', 'EURO 4 Cl Class N1_III'), ('EURO 4 Pl Class M1', 'EURO 4 Pl Class M1'), ('EURO 4 Pl Class N1_I', 'EURO 4 Pl Class N1_I'), ('EURO 4 Pl Class N1_II', 'EURO 4 Pl Class N1_II'), ('EURO 4 Pl Class N1_III', 'EURO 4 Pl Class N1_III'), ('EURO 5a Cl Class M N1_I', 'EURO 5a Cl Class M N1_I'), ('EURO 5a Cl Class N1_II', 'EURO 5a Cl Class N1_II'), ('EURO 5a Cl Class N1_III N2', 'EURO 5a Cl Class N1_III N2'), ('EURO 5a Sl Class M N1_I', 'EURO 5a Sl Class M N1_I'), ('EURO 5a Sl Class N1_II', 'EURO 5a Sl Class N1_II'), ('EURO 5a Sl Class N1_III N2', 'EURO 5a Sl Class N1_III N2'), ('EURO 5b Sl Class M N1_I', 'EURO 5b Sl Class M N1_I'), ('EURO 5b Sl Class N1_II', 'EURO 5b Sl Class N1_II'), ('EURO 5b Sl Class N1_III N2', 'EURO 5b Sl Class N1_III N2'), ('EURO 6b Sl Class M N1_I', 'EURO 6b Sl Class M N1_I'), ('EURO 6b Sl Class N1_II', 'EURO 6b Sl Class N1_II'), ('EURO 6b Sl Class N1_III N2', 'EURO 6b Sl Class N1_III N2'), ('Japan PNLT Cl MCV', 'Japan PNLT Cl MCV'), ('Japan PNLT Cl PC LCV', 'Japan PNLT Cl PC LCV'), ('Japan PNLT Sl MCV', 'Japan PNLT Sl MCV'), ('Japan PNLT Sl MLCV', 'Japan PNLT Sl MLCV'), ('Japan PNLT Sl PC LCV', 'Japan PNLT Sl PC LCV')], default='None', max_length=100, verbose_name='Pollutant Limits')),
                ('channel', models.CharField(blank=True, choices=[('VDCDyno1', 'VDCDyno1')], default='None', max_length=100, verbose_name='Channel Set')),
                ('sao_offset', models.CharField(blank=True, choices=[], default='None', max_length=100, verbose_name='SAO Offset')),
                ('post_export', models.BooleanField(verbose_name='Run export after test?')),
                ('post_report', models.BooleanField(verbose_name='Run report after test?')),
                ('idle_check', models.BooleanField(verbose_name='Run idle check?')),
                ('check_type', models.CharField(blank=True, choices=[], default='None', max_length=100, verbose_name='Idle check type')),
                ('idle_high', models.PositiveSmallIntegerField(verbose_name='Idle high minimum value (rpm)')),
                ('skip_first', models.BooleanField(verbose_name='Skip first bag pair?')),
                ('repeat', models.BooleanField(verbose_name='Prompt to repeat test proceudre?')),
                ('break_time', models.PositiveSmallIntegerField(verbose_name='Maximum break time (min)')),
                ('auto_select', models.BooleanField(verbose_name='Auto select bag pairs?')),
                ('bag_read', models.BooleanField(verbose_name='Wait for bag reads?')),
                ('dump_time', models.PositiveSmallIntegerField(verbose_name='Bag pair dump duration (s)')),
                ('side_leak', models.BooleanField(verbose_name='Run vacuum side leak check?')),
                ('hang_up', models.BooleanField(verbose_name='Run hang-up check?')),
                ('blower', models.BooleanField(verbose_name='Run CVS blower?')),
                ('chassis', models.BooleanField(verbose_name='Control chassis dynamometer?')),
                ('road_verify', models.BooleanField(verbose_name='Run road load verification?')),
                ('road_adjust', models.BooleanField(verbose_name='Run road load adjustment?')),
                ('coast_config', models.CharField(blank=True, choices=[('US', 'US')], default='None', max_length=25, verbose_name='Coastdown Configuration')),
                ('gradient', models.BooleanField(verbose_name='Control gradient demand?')),
                ('per_sample', models.BooleanField(verbose_name='Set individual sample rates?')),
                ('all_samples', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('samples', models.CharField(blank=True, max_length=255, null=True, verbose_name='Individual sample rates, stored as a string until JSON support is added')),
                ('recharged', models.BooleanField(verbose_name='Enter recharged electrical energy after test')),
                ('break_off', models.CharField(blank=True, choices=[('NONE', 'None'), ('WLTP PEV', 'WLTP PEV'), ('SAE J1634 PEV', 'SAE J1634 PEV'), ('SAE J1711 HEV FCT', 'SAE J1711 HEV FCT'), ('WLTP HEV CD', 'WLTP HEV CD')], default='None', max_length=50, verbose_name='Break-off / end-of-test criterion')),
                ('pre_speed', models.SmallIntegerField(blank=True, default=0, verbose_name='Pre-pull away speed (km/h)')),
                ('pre_time', models.SmallIntegerField(blank=True, default=0, verbose_name='Pre-pull away time (s)')),
                ('ahead_speed', models.SmallIntegerField(blank=True, default=0, verbose_name='Look ahead speed (s)')),
                ('ahead_throttle', models.SmallIntegerField(blank=True, default=0, verbose_name='Look ahead throttle position (s)')),
                ('ahead_clutch', models.SmallIntegerField(blank=True, default=0, verbose_name='Look ahead clutch position (s)')),
                ('ahead_brake', models.SmallIntegerField(blank=True, default=0, verbose_name='Look ahead brake position (s)')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('procedure', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='backend.procedures')),
                ('vehicle', models.ForeignKey(blank=True, db_constraint=False, limit_choices_to={'status': 'APPROVE'}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='backend.datahandler')),
            ],
            options={
                'verbose_name': 'historical tests',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
